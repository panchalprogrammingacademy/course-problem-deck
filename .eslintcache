[{"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/index.js":"1","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/App.js":"2","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/Homepage.js":"3","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/LocalStorage.js":"4","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/Login.js":"5","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/PageNotFound.js":"6","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/ToastedNotes.js":"7","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/ExternalLink.js":"8","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Fotter.js":"9","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/DataAccessObject.js":"10","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader2.js":"11","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/AttemptCodingProblem.js":"12","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodingProblemEditor.js":"13","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodingCoursePage.js":"14","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodeEditor.js":"15","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader0.js":"16","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader3.js":"17","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/ScreenResizer.js":"18","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/LocalStorage.js":"19","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader1.js":"20","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/Modal.js":"21","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/QuizEditor.js":"22","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/Question.js":"23","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/QuestionTypes.js":"24","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/QuizletEditor.js":"25","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/CONSTANTS.js":"26","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/Quizlet.js":"27","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/CodingProblems.js":"28"},{"size":215,"mtime":1611479619645,"results":"29","hashOfConfig":"30"},{"size":2041,"mtime":1613729961044,"results":"31","hashOfConfig":"30"},{"size":2298,"mtime":1613713213875,"results":"32","hashOfConfig":"30"},{"size":4627,"mtime":1613712108909,"results":"33","hashOfConfig":"30"},{"size":3115,"mtime":1613729902203,"results":"34","hashOfConfig":"30"},{"size":1530,"mtime":1613711762233,"results":"35","hashOfConfig":"30"},{"size":6866,"mtime":1613728155777,"results":"36","hashOfConfig":"30"},{"size":1046,"mtime":1613713830782,"results":"37","hashOfConfig":"30"},{"size":885,"mtime":1613712149857,"results":"38","hashOfConfig":"30"},{"size":822,"mtime":1613730301749,"results":"39","hashOfConfig":"30"},{"size":182,"mtime":1613712228589,"results":"40","hashOfConfig":"30"},{"size":13215,"mtime":1613717778376,"results":"41","hashOfConfig":"30"},{"size":15478,"mtime":1613729926478,"results":"42","hashOfConfig":"30"},{"size":5024,"mtime":1613712628237,"results":"43","hashOfConfig":"30"},{"size":6097,"mtime":1613712615301,"results":"44","hashOfConfig":"30"},{"size":1208,"mtime":1613712216785,"results":"45","hashOfConfig":"30"},{"size":264,"mtime":1613712237957,"results":"46","hashOfConfig":"30"},{"size":2497,"mtime":1613710485741,"results":"47","hashOfConfig":"30"},{"size":1065,"mtime":1613712402682,"results":"48","hashOfConfig":"30"},{"size":307,"mtime":1613712222177,"results":"49","hashOfConfig":"30"},{"size":1775,"mtime":1613712598845,"results":"50","hashOfConfig":"30"},{"size":15843,"mtime":1613729310937,"results":"51","hashOfConfig":"30"},{"size":8678,"mtime":1613729046647,"results":"52","hashOfConfig":"30"},{"size":204,"mtime":1613718027236,"results":"53","hashOfConfig":"30"},{"size":851,"mtime":1613718607806,"results":"54","hashOfConfig":"30"},{"size":294,"mtime":1613729479105,"results":"55","hashOfConfig":"30"},{"size":0,"mtime":1613729349130,"results":"56","hashOfConfig":"30"},{"size":2221,"mtime":1613729710198,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"ncc6di",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/index.js",[],["116","117"],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/App.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/Homepage.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/LocalStorage.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/Login.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/core/PageNotFound.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/ToastedNotes.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/ExternalLink.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Fotter.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/DataAccessObject.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader2.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/AttemptCodingProblem.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodingProblemEditor.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodingCoursePage.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/CodeEditor.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader0.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader3.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/ScreenResizer.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/LocalStorage.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/utility/Loader1.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/coding/Modal.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/QuizEditor.js",["118","119","120","121","122","123","124","125","126","127"],"import React, { useEffect, useState, useCallback } from 'react';\nimport './styles/QuizEditor.scss';\nimport ExternalLink from '../utility/ExternalLink';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCalendarCheck, faTimes, faTrash, faDirections } from '@fortawesome/free-solid-svg-icons';\nimport { useToasts } from '../utility/ToastedNotes';\nimport Question from './Question';\nimport Loader1 from '../utility/Loader1';\nimport { v4 as uuidv4 } from 'uuid';\nimport NothingHereImage from '../../assets/nothing.webp';\nimport {verify_and_fetch_problem, save_problem, CLIENT_URL, delete_problem, TOKEN_STRING} from '../../helpers/DataAccessObject';\nimport {Redirect} from 'react-router-dom';\nimport Fotter from '../utility/Fotter';\nimport * as questionTypes from '../../helpers/QuestionTypes';\n\n\n// functional component\nexport default function QuizEditor(props){\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [quizId, setQuizId] = useState(null);\n    const [title, setTitle] = useState('');\n    const [timeLimit, setTimeLimit] = useState(0);\n    const [tags, setTags] = useState([]);\n    const [questions, setQuestions] = useState([\n        { id: uuidv4(), ref: React.createRef()}\n    ]);\n    const [tagText, setTagText] = useState('');\n    const [redirect, setRedirect] = useState(null);\n    const { addToast } = useToasts();\n\n\n    // displays the toast with error message\n    const flagError = useCallback((message, autoDismiss=false) => addToast(message, {appearance: 'error', autoDismiss}), [addToast]);\n    // event handler for add tag\n    const onAddTagHandler = (event) => {\n        if (event.key === 'Enter') {\n            let text = tagText.trim().toUpperCase();\n            setTagText('');    \n            if (text === '')    return;\n            if (tags.indexOf(text) !== -1)  return;\n            setTags([...tags, text]);\n        }\n    };\n    // event handler for addding new-problem\n    const addQuestionHandler = (event) => {\n        let oldQuestions = [...questions];\n        let question = {\n            id: uuidv4(),\n            ref: React.createRef(),\n        }\n        oldQuestions.push(question);\n        setQuestions(oldQuestions);\n    };\n    // deletes the problem\n    const deleteQuestionHandler = (index) => {\n        let oldQuestions = [...questions];\n        oldQuestions.splice(index, 1);\n        setQuestions(oldQuestions);\n    };\n    // event handler for moving a questionUp\n    const moveUpHandler = (index) => {\n        let oldQuestions = [...questions];\n        if (index > 0) {\n            let item = oldQuestions[index - 1];\n            oldQuestions[index - 1] = oldQuestions[index];\n            oldQuestions[index] = item; \n        }\n        setQuestions(oldQuestions);\n    };\n    // event handler for moving a questionDown\n    const moveDownHandler = (index) => {\n        let oldQuestions = [...questions];\n        let lastIndex = questions.length - 1;\n        if (index < lastIndex) {\n            let item = oldQuestions[index + 1];\n            oldQuestions[index + 1] = oldQuestions[index];\n            oldQuestions[index] = item; \n        }\n        setQuestions(oldQuestions);\n    };\n\n\n    // event handler for save quiz\n    const saveQuizHandler = () => {\n        // check if title is provided\n        if (title.trim() === ``) {\n            // inform user\n            flagError(`Please provide a title`, true);\n            // cannot process further\n            return;\n        }\n        // check if time limit is valid\n        let time = null;\n        try{time = parseInt(timeLimit);} catch(error) { }\n        if (!time || time < 0 || time > 120) {\n            // inform user\n            flagError(`Please provide a valid time limit`, true);\n            // cannot process further\n            return;\n        }\n        // check if at least one tag is provided\n        if (tags.length === 0) {\n            // inform user\n            flagError(`Please provide at least one tag`, true);\n            // cannot process further\n            return;\n        }\n        // check if questions are added\n        if (questions.length === 0) {\n            // inform user\n            flagError(`Please provide at least one question`, true);\n            // cannot process further\n            return;\n        }\n        // get all the problems\n        let questionsList = [];\n        for (let i = 0; i < questions.length; ++i) {\n            let {ref} = questions[i];\n            if (ref.current) {\n                let question = {...ref.current.state};\n                let {questionType, score, options, expectedAnswer} = question;\n                questionsList.push(question);\n                let points = null;\n                try{points = parseInt(score)} catch(error){ }\n                if (!points) {\n                    // inform user\n                    flagError(`Please provide valid score for question ${i + 1}`, true);\n                    // cannot process further\n                    return;\n                }\n                if (questionType === questionTypes.MULTIPLE_CHOICE || \n                    questionType === questionTypes.CHECKBOXES) {\n                    // for questions with choices - at least two options are required\n                    if (options.length < 2) {\n                        // inform user\n                        flagError(`Please provide at least two options for question ${i + 1}`, true);\n                        // cannot process further\n                        return;\n                    }\n                    let checkedCount = 0;\n                    // check if options are valid\n                    for (let j = 0; j < options.length; ++j){\n                        if (options[j].checked) checkedCount++;\n                        if (String(options[j].text).trim() === ``){\n                            // inform user\n                            flagError(`Please provide a text for question ${i + 1}, option ${j + 1}`, true);\n                            // cannot process further\n                            return;\n                        }\n                    }\n                    // at least one of the options has to be checked\n                    if (checkedCount === 0){\n                        // inform user\n                        flagError(`Please select at least one of the option for question ${i + 1}`, true);\n                        // cannot process further\n                        return;\n                    }    \n                } else {\n                    // expected answer has to be provided\n                    if (expectedAnswer.trim() === ``) {\n                        // inform user\n                        flagError(`Please provide expected answer for question ${i + 1}`, true);\n                        // cannot process further\n                        return;\n                    }\n                }\n            }\n        }\n        // we can proceed to save the quiz to server\n        console.log(questionsList);\n    };\n\n\n\n    // // update the properties of the problem\n    // const handleAPISuccess = useCallback((response, saved) => {\n    //     let {data} = response;\n    //     let {problem} = data;\n    //     if (!problem)   flagError(`Server couldn't process your request`);\n    //     console.log(problem);\n    //     // update all the properties of the problem\n    //     setQuestionId(problem._id);  \n    //     setTitle(problem.title);\n    //     setTimeLimit(problem.timeLimit);\n    //     let statement = String(problem.problemStatement);\n    //     let problemHTML = statement.replaceAll(/(<p><br><\\/p>)+/g, `<p><br></p>`);\n    //     setQuestionStatement(problemHTML);\n    //     setTags(problem.tags);\n    //     setTestCases(problem.testCases);\n    //     // update the location to edit\n    //     let url = CLIENT_URL + \"/#/admin/problem/edit/\" + problem._id;\n    //     if (window.location.href !== url)   window.location.href = url;\n    //     // display toast on success\n    //     if (saved) addToast(`Your problem was successfully saved!`, {appearance: 'success', autoDismiss: false});\n    //     // the problem was found successfully so close the loader\n    //     setIsLoading(false);\n    // }, [flagError, addToast]);\n    // // handles the API error\n    // const handleAPIError = useCallback((error) => {\n    //     console.log(error);\n    //     let {response} = error;\n    //     let {data} = response;\n    //     let {message} = data;\n    //     flagError(message);\n    //     setIsLoading(false);\n    // }, [flagError]);\n\n\n    // // loads the problem from database if questionId is provided\n    // useEffect(function(){\n    //     if (!questionId) return;\n    //     setIsLoading(true);\n    //     verify_and_fetch_problem(questionId)\n    //     .then(response => handleAPISuccess(response, false))\n    //     .catch((error) => {\n    //         console.log(error);\n    //         localStorage.removeItem(TOKEN_STRING);\n    //         setRedirect(<Redirect to=\"/\" />);\n    //     });\n    // }, [questionId, addToast, handleAPISuccess, handleAPIError]);\n    \n    // // handles the submit form \n    // const onSaveQuestion = (event) => {\n    //     if (!event.isTrusted)   return;\n    //     if (isLoading)  return;\n    //     // validate problems properties\n    //     if (title.trim() === '')    return flagError('Please provide a valid title');\n    //     if (timeLimit < 1)          return flagError('Time limit has to be at least 1ms');\n    //     if (problemStatement === '')    return flagError('Please provide a problem statement');\n    //     if (testCases.length === 0) return flagError('Please provide at least one test-case');\n    //     for (let i = 0; i < testCases.length; ++i)\n    //         if (testCases[i].points < 1)    return flagError('Points must be at least 1 for test-case ' + (i + 1));\n    //     // everything is valid for the problem\n    //     // now we go ahead and save the problem\n    //     setIsLoading(true);\n    //     save_problem(questionId, title, timeLimit, \n    //         problemStatement, tags, testCases)\n    //     .then(response => handleAPISuccess(response, true))\n    //     .catch(handleAPIError)\n    // };\n\n    // // handles the problem delete request\n    // const onDeleteQuestion = (event => {\n    //     if (!event.isTrusted)   return;\n    //     if (isLoading)  return;\n    //     setIsLoading(true);\n    //     delete_problem(questionId).then(response => {\n    //         setRedirect(<Redirect to=\"/\" />);\n    //     }).catch(error => {\n    //         console.log(error);\n    //         let {response} = error;\n    //         let {data} = response;\n    //         let {message} = data;\n    //         flagError(message);\n    //         setIsLoading(false);\n    //     });\n    // });\n\n\n    // \n\n    if (redirect)   return redirect;\n    document.title = (quizId ? \"Edit\" : \"Create\") + \" Quiz | Quizlet\";\n    // UI to be rendered\n    return (\n        <div id=\"quiz-editor\">\n            <div className=\"header\">\n                <h1>{quizId ? \"Edit\" : \"Create\"} Quiz</h1>\n                <p>The act of creating/editing quizzes is restricted \n                    to the admins of \n                    <ExternalLink to=\"https://panchalprogrammingacademy.github.io/panchalprogrammingacademy\"\n                        external={true} newWindow={true} className=\"link\">\n                            <strong>Panchal Programming Academy</strong>\n                        </ExternalLink>\n                    <br/>\n                    Nobody outside the admin team has rights to create/edit problems.<br/>\n                    If you are here by mistake then please leave the page immediately to avoid any future inconvenience!<br/>\n                </p>                \n            </div>\n\n\n            {isLoading && <div className=\"loader\"><Loader1 /></div>}\n            {!isLoading && \n            <div className=\"problem-container\">\n                <div className=\"problem-meta-data\">\n                    <div className=\"input-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" id='title' placeholder=\"Title\"\n                            value={title} onChange={event => setTitle(event.target.value)} />\n                    </div>\n                    <div className=\"input-group\">\n                        <label htmlFor=\"time-limit\">Time limit (in minutes)</label>\n                        <input type=\"number\" min=\"0\" max=\"120\" id='time-limit' placeholder=\"Time limit\" \n                            value={timeLimit} onChange={event => setTimeLimit(event.target.value)}/>\n                    </div>\n                </div>\n\n                <div className=\"tags-container\">\n                    <div className=\"input-group\">\n                        <label htmlFor=\"tags\">Tags</label>\n                        <div className=\"tags\">\n                            {tags.map(tag => \n                            (<div className=\"tag\" key={tag}>\n                                {tag}\n                                <button onClick={event => {\n                                    let oldTags = [...tags];\n                                    let index = oldTags.indexOf(tag);\n                                    if (index === -1)   return;\n                                    oldTags.splice(index, 1);\n                                    setTags(oldTags);\n                                }}><FontAwesomeIcon icon={faTimes}/></button>\n                            </div>))}\n                        </div>\n                        <input type=\"text\" onKeyDown={onAddTagHandler} \n                            value={tagText} onChange={event => setTagText(event.target.value)}\n                            placeholder=\"Type a tag and hit enter\"/>\n                    </div>\n                </div>\n\n                <div className=\"problems\">\n                    {questions.map((question, index) => (\n                        <Question \n                            key={question.id}\n                            ref={question.ref}\n                            index={index}\n                            deleteHandler={deleteQuestionHandler}\n                            moveUpHandler={moveUpHandler}\n                            moveDownHandler={moveDownHandler}\n                            questionId={question.id}\n                            disabledUp={index === 0}\n                            disabledDown={index === questions.length - 1}\n                        />\n                    ))}\n                    {questions.length === 0 && \n                    <div className=\"nothing-here\">\n                        <div>\n                            <img src={NothingHereImage} alt=\"\" />\n                        </div>\n                        <div>\n                            No questions added to this quiz!\n                        </div>\n                    </div>}\n                </div>\n\n                <div className=\"sticky-footer\">\n                    {quizId && \n                    <button className=\"secondary\">\n                        <ExternalLink to={\"/problem/\" + quizId} \n                            newWindow={true} className=\"browse-problem\">\n                            <FontAwesomeIcon icon={faDirections}/>\n                        </ExternalLink>\n                    </button>}\n                    {quizId && \n                    <button className=\"danger\">\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </button>}\n                    <button className=\"info\" onClick={addQuestionHandler}>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </button>\n                    <button className=\"success\" onClick={saveQuizHandler}>\n                        <FontAwesomeIcon icon={faCalendarCheck} />\n                    </button>\n                </div>\n            </div>}\n\n            <Fotter />\n        </div>\n    );\n};","/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/Question.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/QuestionTypes.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/components/quizlet/QuizletEditor.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/CONSTANTS.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/Quizlet.js",[],"/home/shubham-panchal/Production/web-development/course-problem-deck/client/src/helpers/CodingProblems.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"136","line":11,"column":9,"nodeType":"134","messageId":"135","endLine":11,"endColumn":33},{"ruleId":"132","severity":1,"message":"137","line":11,"column":35,"nodeType":"134","messageId":"135","endLine":11,"endColumn":47},{"ruleId":"132","severity":1,"message":"138","line":11,"column":49,"nodeType":"134","messageId":"135","endLine":11,"endColumn":59},{"ruleId":"132","severity":1,"message":"139","line":11,"column":61,"nodeType":"134","messageId":"135","endLine":11,"endColumn":75},{"ruleId":"132","severity":1,"message":"140","line":11,"column":77,"nodeType":"134","messageId":"135","endLine":11,"endColumn":89},{"ruleId":"132","severity":1,"message":"141","line":12,"column":9,"nodeType":"134","messageId":"135","endLine":12,"endColumn":17},{"ruleId":"132","severity":1,"message":"142","line":20,"column":23,"nodeType":"134","messageId":"135","endLine":20,"endColumn":35},{"ruleId":"132","severity":1,"message":"143","line":21,"column":20,"nodeType":"134","messageId":"135","endLine":21,"endColumn":29},{"ruleId":"132","severity":1,"message":"144","line":29,"column":22,"nodeType":"134","messageId":"135","endLine":29,"endColumn":33},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'verify_and_fetch_problem' is defined but never used.","'save_problem' is defined but never used.","'CLIENT_URL' is defined but never used.","'delete_problem' is defined but never used.","'TOKEN_STRING' is defined but never used.","'Redirect' is defined but never used.","'setIsLoading' is assigned a value but never used.","'setQuizId' is assigned a value but never used.","'setRedirect' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]